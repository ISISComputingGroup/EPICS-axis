#Addition of alias here to provide aliasing of the motor to the axis.
#Note that in any st.cmd that loads this it will have to be a logical name in $(AXIS)
alias("$(P)$(mAXIS)","$(P)$(AXIS):MTR")

record (ao, "$(P)$(AXIS):SP")
{
	field(DESC, "Axis Setpoint")
	field(OUT, "$(P)$(AXIS)_write PP")
	field(PREC, "3")
    field(EGU, "")
    info(archive, "VAL")
    info(INTEREST, "HIGH")
}

record (ao, "$(P)$(AXIS)_write")
{
	field(OUT, "$(P)$(mAXIS).VAL PP")
    field(SDIS, "$(P)$(AXIS)_sync.PACT")
    field(DISV, "1")
}

record(ao, "$(P)$(AXIS)_sync")
{
    field(DOL,  "$(P)$(AXIS):SP:RBV NPP MS")
    field(OMSL, "closed_loop")
    field(OUT,  "$(P)$(AXIS):SP PP MS")
}

record (ai, "$(P)$(AXIS):SP:RBV") 
{
	field(DESC, "Axis Setpoint readback")
	field(PREC, "3")
    field(INP, "$(P)$(mAXIS).VAL CP MS")
    field(EGU, "")
    field(FLNK, "$(P)$(AXIS)_sync")
    info(archive, "VAL")
    info(INTEREST, "HIGH")
}

record (ai, "$(P)$(AXIS)") 
{
	field(DESC, "Axis current position")
	field(PREC, "3")
    field(INP, "$(P)$(mAXIS).RBV CP MS")
    field(EGU, "")
    info(archive, "0.1 VAL")
    info(INTEREST, "HIGH")
}

record (longin, "$(P)$(AXIS):DMOV")
{
    field(DESC, "Axis done move")
    field(INP, "$(P)$(mAXIS).DMOV CP")
    field(EGU, "")
    info(archive, "VAL")
    info(INTEREST, "MEDIUM")
}

record (transform, "$(P)$(AXIS):INIT")
{
	field(DESC, "Axis Value Init")
    field(COPT, "Always")
    field(PINI, "YES")
	field(INPA, "$(P)$(mAXIS).VAL NPP NMS")
	field(CLCA, "A")
	field(OUTA, "$(P)$(AXIS):SP NPP NMS")
	field(PREC, "3")
	field(CMTA, "Axis initial setpoint")
}

#  do not PINI or autosave - underlying motor record will do this
record(bo, "$(P)$(AXIS):ABLE:SP") {
  field(DESC, "Axis enable")
  field(OUT, "$(P)$(mAXIS)_able PP MS")
  field(ZNAM, "Enable")
  field(ONAM, "Disable")
}

record(bi, "$(P)$(AXIS):ABLE") {
  field(DESC, "Axis enable status")
  field(INP, "$(P)$(mAXIS)_able CP MS")
  field(ZNAM, "Enable")
  field(ONAM, "Disable")
}
alias("$(P)$(AXIS):ABLE", "$(P)$(AXIS):ABLE:SP:RBV")

# Alternative: have a read/write $(AXIS):MTR_able PV in sync with $(mAXIS)_able
# This is used in the motor details OPI
# The $(AXIS):ABLE PVs above are preserved so their functionality is not broken
record(bo, "$(P)$(AXIS):MTR_able") {
  field(DESC, "Axis enable")
  field(OUT, "$(P)$(AXIS)_able_write PP")
  field(ZNAM, "Enable")
  field(ONAM, "Disable")
}

record(bo, "$(P)$(AXIS)_able_write") {
  field(OUT, "$(P)$(mAXIS)_able PP MS")
  field(ZNAM, "Enable")
  field(ONAM, "Disable")
  field(SDIS, "$(P)$(AXIS)_able_sync.PACT")
  field(DISV, "1")
}

record(bi, "$(P)$(AXIS)_able_read") {
  field(DESC, "Axis enable readback")
  field(INP, "$(P)$(mAXIS)_able CP MS")
  field(ZNAM, "Enable")
  field(ONAM, "Disable")
  field(FLNK, "$(P)$(AXIS)_able_sync")
}

record(bo, "$(P)$(AXIS)_able_sync") {
  field(DOL, "$(P)$(AXIS)_able_read NPP MS")
  field(OMSL, "closed_loop")
  field(OUT, "$(P)$(AXIS):MTR_able PP MS")
}

record(stringin, "$(P)$(AXIS):MOTOR") {
  field(DESC, "Axis motor name")
  field(VAL, "$(mAXIS)")
}

record(bo, "$(P)$(AXIS):STOP") {
  field(DESC, "Stop the axis motor")
  field(OUT, "$(P)$(mAXIS).STOP 1")
}

record(bo, "$(P)$(AXIS):LOCK:SP") {
  field(DESC, "Axis lock")
  field(OUT, "$(P)$(mAXIS)_lock PP MS")
  field(ZNAM, "Unlocked")
  field(ONAM, "Locked")
}

record(bi, "$(P)$(AXIS):LOCK") {
  field(DESC, "Axis lock status")
  field(INP, "$(P)$(mAXIS)_lock CP MS")
  field(ZNAM, "Unlocked")
  field(ONAM, "Locked")
}
alias("$(P)$(AXIS):LOCK", "$(P)$(AXIS):LOCK:SP:RBV")

## update axis archive and monitor deadbands from motor deadbands
record (seq, "$(P)$(AXIS):AMDEL") {
	field(PINI, "1")
	field(DOL1, "$(P)$(mAXIS).ADEL NPP NMS")
	field(LNK1, "$(P)$(AXIS).ADEL NPP NMS")
	field(DOL2, "$(P)$(mAXIS).MDEL NPP NMS")
	field(LNK2, "$(P)$(AXIS).MDEL NPP NMS")
}

# Fallback tolerance used if neither retry deadband not setpoint deadband is set.
record(calc, "$(P)$(mAXIS):IN_POSITION:_FALLBACK")  {
    field(ASG, "READONLY")
    field(INPA, "$(P)$(mAXIS).ERES CP MS")
    field(INPB, "$(P)$(mAXIS).MRES CP MS")
    field(CALC, "10*MAX(ABS(A),ABS(B))")
}

record(calc, "$(P)$(mAXIS):IN_POSITION:TOLERANCE") {
    field(ASG, "READONLY")
    field(INPA, "$(P)$(mAXIS).RTRY CP MS")  # Max retries
    field(INPB, "$(P)$(mAXIS).RDBD CP MS")  # Retry deadbands
    field(INPC, "$(P)$(mAXIS).SPDB CP MS")  # Setpoint deadband    
    field(INPD, "$(P)$(mAXIS).MRES CP MS")  # motor resolution   
    field(INPE, "$(P)$(mAXIS):IN_POSITION:_FALLBACK CP MS")  # fallback tolerance 
    
    # If retry deadband > MRES or max retries > 0, use retry deadband
    # Otherwise, if setpoint deadband is non-zero use it, else fall back to 10*MAX(ERES, MRES)
    field(CALC, "(A>0||B>D)?B:((C>0)?C:E)")    
}

record(calc, "$(P)$(mAXIS):IN_POSITION") {
    field(ASG, "READONLY")
    field(INPA, "$(P)$(mAXIS):IN_POSITION:TOLERANCE CP MS")
    field(INPB, "$(P)$(mAXIS).DIFF CP MS")
    field(INPC, "$(P)$(mAXIS).MOVN CP MS")
    
    # If moving assume in position, otherwise check that 
    field(CALC, "C||ABS(B)<=ABS(A)")
}


record(calc, "$(P)$(mAXIS):USING_ENCODER") {
    field(ASG, "READONLY")
    field(INPA, "$(P)$(mAXIS).MSTA CP MS")
    field(INPB, "$(P)$(mAXIS).UEIP CP MS")
    
    # Bitwise AND on MSTA to select the "encoder present" flag.
    field(CALC, "((A&256)=256)&&B")
}
